/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MessageCreateRequest;
import org.openapitools.model.MessageResponse;
import org.springframework.data.domain.Pageable;
import org.openapitools.model.PaginatedMessageResponse;
import org.springdoc.api.annotations.ParameterObject;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-28T19:18:29.784073+08:00[Asia/Taipei]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "messages", description = "the messages API")
public interface MessagesApi {

    /**
     * POST /messages : Create a new message
     *
     * @param messageCreateRequest  (required)
     * @return The created message (status code 200)
     */
    @Operation(
        operationId = "createMessage",
        summary = "Create a new message",
        tags = { "messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The created message", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/messages",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<MessageResponse> createMessage(
        @Parameter(name = "MessageCreateRequest", description = "", required = true) @Valid @RequestBody MessageCreateRequest messageCreateRequest
    );


    /**
     * GET /messages : Get all messages
     *
     * @param page Page number of the requested page (optional, default to 0)
     * @param size Size of the requested page (optional, default to 20)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return A list of messages (status code 200)
     */
    @Operation(
        operationId = "getAllMessages",
        summary = "Get all messages",
        tags = { "messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of messages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedMessageResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/messages",
        produces = { "application/json" }
    )
    
    ResponseEntity<PaginatedMessageResponse> getAllMessages(
        @Min(0) @Parameter(name = "page", description = "Page number of the requested page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Size of the requested page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @ParameterObject final Pageable pageable
    );

}
